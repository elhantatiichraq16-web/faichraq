{% extends 'base.html.twig' %}

{% block title %}Modifier {{ facture.reference }} - {{ parent() }}{% endblock %}
{% block page_title %}Modifier la facture{% endblock %}

{% block page_actions %}
    <div class="btn-group" role="group">
        <a href="{{ path('facture_show', {'id': facture.id}) }}" class="btn btn-outline-info">
            <i class="bi bi-eye"></i> Voir
        </a>
        <a href="{{ path('facture_pdf', {'id': facture.id}) }}" class="btn btn-outline-danger">
            <i class="bi bi-file-pdf"></i> PDF
        </a>
        <a href="{{ path('facture_index') }}" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Retour
        </a>
    </div>
{% endblock %}

{% block body %}
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-pencil"></i> Modifier la facture : {{ facture.reference }}
                </h5>
            </div>
            <div class="card-body">
                <form method="post" action="{{ path('facture_edit', {'id': facture.id}) }}" novalidate id="facture-form">
                    <input type="hidden" name="_token" value="{{ csrf_token('edit_facture' ~ facture.id) }}">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="reference" class="form-label">Référence</label>
                                <input type="text" id="reference" name="reference" class="form-control" value="{{ (data.reference ?? facture.reference) ?? '' }}" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="client_id" class="form-label">Client *</label>
                                <select id="client_id" name="client_id" class="form-select">
                                    <option value="">Sélectionner un client</option>
                                    {% for c in clients %}
                                        <option value="{{ c.id }}" {% if (data.client_id ?? facture.client?.id) == c.id %}selected{% endif %}>{{ c.nom }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="dateFacture" class="form-label">Date de facture *</label>
                                <input type="date" id="dateFacture" name="dateFacture" class="form-control" value="{{ (data.dateFacture ?? facture.dateFacture|date('Y-m-d')) ?? '' }}">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="dateEcheance" class="form-label">Date d'échéance</label>
                                <input type="date" id="dateEcheance" name="dateEcheance" class="form-control" value="{{ data.dateEcheance ?? (facture.dateEcheance ? facture.dateEcheance|date('Y-m-d') : '') }}">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="etat" class="form-label">État</label>
                                <select id="etat" name="etat" class="form-select">
                                    {% for label, value in facture.getEtatsDisponibles() %}
                                        <option value="{{ value }}" {% if (data.etat ?? facture.etat) == value %}selected{% endif %}>{{ label }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="devise" class="form-label">Devise</label>
                                <select id="devise" name="devise" class="form-select">
                                    {% set dev = data.devise ?? facture.devise %}
                                    <option value="MAD" {% if dev == 'MAD' %}selected{% endif %}>MAD</option>
                                    <option value="EUR" {% if dev == 'EUR' %}selected{% endif %}>EUR</option>
                                    <option value="USD" {% if dev == 'USD' %}selected{% endif %}>USD</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea id="notes" name="notes" class="form-control" rows="3" placeholder="Notes additionnelles">{{ (data.notes ?? facture.notes) ?? '' }}</textarea>
                    </div>
                    
                    <hr>
                    
                    <h5>Lignes de facture</h5>
                    <div id="lignes-container" data-index="0">
                        {% set lignes = data.lignes ?? [] %}
                        {% if lignes is empty %}
                            {% set lignes = [] %}
                            {% for l in facture.lignes %}
                                {% set lignes = lignes|merge([{ designation: l.designation, quantite: l.quantite, prixUnitaire: l.prixUnitaire, tva: l.tva }]) %}
                            {% endfor %}
                        {% endif %}
                        {% for i, ligne in lignes %}
                            <div class="ligne-item border p-3 mb-3 rounded">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Désignation</label>
                                            <input type="text" name="lignes[{{ i }}][designation]" class="form-control" value="{{ ligne.designation ?? '' }}">
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="mb-3">
                                            <label class="form-label">Quantité</label>
                                            <input type="number" name="lignes[{{ i }}][quantite]" class="form-control quantite" value="{{ ligne.quantite ?? 1 }}">
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="mb-3">
                                            <label class="form-label">Prix unitaire</label>
                                            <input type="number" step="0.01" name="lignes[{{ i }}][prixUnitaire]" class="form-control prix-unitaire" value="{{ ligne.prixUnitaire ?? '0.00' }}">
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="mb-3">
                                            <label class="form-label">TVA (%)</label>
                                            <input type="number" step="0.01" name="lignes[{{ i }}][tva]" class="form-control tva" value="{{ ligne.tva ?? '20.00' }}">
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="mb-3">
                                            <label class="form-label">Total</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control ligne-total" readonly>
                                                <span class="input-group-text">{{ facture.devise }}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <button type="button" class="btn btn-sm btn-outline-danger remove-ligne">
                                        <i class="bi bi-trash"></i> Supprimer
                                    </button>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                    
                    <div class="d-flex gap-2 mb-3">
                        <button type="button" id="add-ligne" class="btn btn-outline-primary">
                            <i class="bi bi-plus-circle"></i> Ajouter une ligne
                        </button>
                        <button type="button" id="add-section" class="btn btn-outline-secondary">
                            <i class="bi bi-layout-text-sidebar-reverse"></i> Ajouter une section
                        </button>
                    </div>
                    
                    <hr>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6>Résumé</h6>
                                    <div class="d-flex justify-content-between">
                                        <span>Total HT :</span>
                                        <span id="total-ht">{{ facture.totalHt|number_format(2, ',', ' ') }} {{ facture.devise }}</span>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Total TVA :</span>
                                        <span id="total-tva">{{ facture.getTotalTva()|number_format(2, ',', ' ') }} {{ facture.devise }}</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between">
                                        <strong>Total TTC :</strong>
                                        <strong id="total-ttc">{{ facture.totalTtc|number_format(2, ',', ' ') }} {{ facture.devise }}</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle"></i> Enregistrer les modifications
                        </button>
                        <a href="{{ path('facture_show', {'id': facture.id}) }}" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle"></i> Annuler
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const lignesContainer = document.getElementById('lignes-container');
    const addLigneBtn = document.getElementById('add-ligne');
    const addSectionBtn = document.getElementById('add-section');
    const prototype = `
        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">Désignation</label>
                    <input type="text" name="lignes[__name__][designation]" class="form-control">
                </div>
            </div>
            <div class="col-md-2">
                <div class="mb-3">
                    <label class="form-label">Quantité</label>
                    <input type="number" name="lignes[__name__][quantite]" class="form-control quantite" value="1">
                </div>
            </div>
            <div class="col-md-2">
                <div class="mb-3">
                    <label class="form-label">Prix unitaire</label>
                    <input type="number" step="0.01" name="lignes[__name__][prixUnitaire]" class="form-control prix-unitaire" value="0.00">
                </div>
            </div>
            <div class="col-md-2">
                <div class="mb-3">
                    <label class="form-label">TVA (%)</label>
                    <input type="number" step="0.01" name="lignes[__name__][tva]" class="form-control tva" value="20.00">
                </div>
            </div>
            <div class="col-md-2">
                <div class="mb-3">
                    <label class="form-label">Total</label>
                    <div class="input-group">
                        <input type="text" class="form-control ligne-total" readonly>
                        <span class="input-group-text">${document.getElementById('devise')?.value || 'MAD'}</span>
                    </div>
                </div>
            </div>
        </div>`;
    function getNextIndex() {
        let i = parseInt(lignesContainer.getAttribute('data-index') || '0', 10);
        lignesContainer.setAttribute('data-index', String(i + 1));
        return i;
    }

    function selectField(root, suffix) {
        return root.querySelector('[name$="[' + suffix + ']"], [name$="[' + suffix + '][]"]');
    }

    function decorateLine(ligneDiv, isSection) {
        const quantite = selectField(ligneDiv, 'quantite');
        const prixUnitaire = selectField(ligneDiv, 'prixUnitaire');
        const tva = selectField(ligneDiv, 'tva');
        const isSectionChk = selectField(ligneDiv, 'isSection');
        let designation = selectField(ligneDiv, 'designation');

        function hideField(inputEl) {
            if (!inputEl) return;
            const col = inputEl.closest('.col-md-2') || inputEl.closest('.col') || inputEl.parentElement;
            if (col) col.classList.add('d-none');
        }
        function showField(inputEl) {
            if (!inputEl) return;
            const col = inputEl.closest('.col-md-2') || inputEl.closest('.col') || inputEl.parentElement;
            if (col) col.classList.remove('d-none');
        }

        // total
        let totalInput = ligneDiv.querySelector('.ligne-total');
        if (!totalInput && !isSection) {
            const totalDiv = document.createElement('div');
            totalDiv.className = 'col-md-2';
            totalDiv.innerHTML = `
                <div class=\"mb-3\">\n                    <label class=\"form-label\">Total</label>\n                    <div class=\"input-group\">\n                        <input type=\"text\" class=\"form-control ligne-total\" readonly>\n                        <span class=\"input-group-text\">MAD</span>\n                    </div>\n                </div>
            `;
            ligneDiv.querySelector('.row').appendChild(totalDiv);
            totalInput = totalDiv.querySelector('.ligne-total');
        }

        // remove/add delete button
        let deleteBtnWrapper = ligneDiv.querySelector('.remove-ligne')?.closest('.text-end');
        if (deleteBtnWrapper) deleteBtnWrapper.remove();
        const deleteDiv = document.createElement('div');
        deleteDiv.className = 'text-end';
        deleteDiv.innerHTML = `
            <button type=\"button\" class=\"btn btn-sm btn-outline-danger remove-ligne\">\n                <i class=\"bi bi-trash\"></i> Supprimer\n            </button>
        `;
        ligneDiv.appendChild(deleteDiv);

        if (isSection) {
            if (isSectionChk) isSectionChk.checked = true;
            ligneDiv.classList.add('bg-light');
            if (quantite) { quantite.value = 0; hideField(quantite); }
            if (prixUnitaire) { prixUnitaire.value = 0; hideField(prixUnitaire); }
            if (tva) { tva.value = 0; hideField(tva); }
            if (totalInput) totalInput.closest('.col-md-2')?.remove();

            // Désignation => textarea
            if (designation && designation.tagName !== 'TEXTAREA') {
                const textarea = document.createElement('textarea');
                textarea.name = designation.name;
                textarea.id = designation.id;
                textarea.className = 'form-control';
                textarea.rows = 2;
                textarea.placeholder = 'Titre de section';
                textarea.value = designation.value || '';
                designation.replaceWith(textarea);
                designation = textarea;
            }
        } else {
            if (isSectionChk) isSectionChk.checked = false;
            ligneDiv.classList.remove('bg-light');
            if (quantite) { showField(quantite); quantite.classList.add('quantite'); }
            if (prixUnitaire) { showField(prixUnitaire); prixUnitaire.classList.add('prix-unitaire'); }
            if (tva) { showField(tva); tva.classList.add('tva'); }

            // textarea => input
            if (designation && designation.tagName === 'TEXTAREA') {
                const input = document.createElement('input');
                input.type = 'text';
                input.name = designation.name;
                input.id = designation.id;
                input.className = 'form-control';
                input.placeholder = 'Description du produit/service';
                input.value = designation.value || '';
                designation.replaceWith(input);
                designation = input;
            }
        }

        [selectField(ligneDiv, 'quantite'), selectField(ligneDiv, 'prixUnitaire'), selectField(ligneDiv, 'tva')]
            .filter(Boolean)
            .forEach(input => input.addEventListener('input', () => { calculateLigneTotal(ligneDiv); updateTotaux(); }));
    }

    function createItem(isSection) {
        const newForm = prototype.replace(/__name__/g, getNextIndex());
        const ligneDiv = document.createElement('div');
        ligneDiv.className = 'ligne-item border p-3 mb-3 rounded';
        ligneDiv.innerHTML = newForm;
        decorateLine(ligneDiv, isSection);
        lignesContainer.appendChild(ligneDiv);
        calculateLigneTotal(ligneDiv);
        updateTotaux();
    }

    function calculateLigneTotal(ligneDiv) {
        const isSectionChk = selectField(ligneDiv, 'isSection');
        if (isSectionChk && isSectionChk.checked) return;
        const q = parseFloat((selectField(ligneDiv, 'quantite')?.value || '0')) || 0;
        const pu = parseFloat((selectField(ligneDiv, 'prixUnitaire')?.value || '0')) || 0;
        const tva = parseFloat((selectField(ligneDiv, 'tva')?.value || '0')) || 0;
        const totalHt = q * pu;
        const totalTva = totalHt * (tva / 100);
        const totalTtc = totalHt + totalTva;
        const totalInput = ligneDiv.querySelector('.ligne-total');
        if (totalInput) totalInput.value = totalTtc.toFixed(2);
    }

    function updateTotaux() {
        let totalHt = 0;
        let totalTva = 0;
        lignesContainer.querySelectorAll('.ligne-item').forEach(ligne => {
            const isSection = selectField(ligne, 'isSection')?.checked;
            if (isSection) return;
            const q = parseFloat((selectField(ligne, 'quantite')?.value || '0')) || 0;
            const pu = parseFloat((selectField(ligne, 'prixUnitaire')?.value || '0')) || 0;
            const t = parseFloat((selectField(ligne, 'tva')?.value || '0')) || 0;
            const ht = q * pu;
            totalHt += ht;
            totalTva += ht * (t / 100);
        });
        const totalTtc = totalHt + totalTva;
        document.getElementById('total-ht').textContent = totalHt.toFixed(2).replace('.', ',') + ' MAD';
        document.getElementById('total-tva').textContent = totalTva.toFixed(2).replace('.', ',') + ' MAD';
        document.getElementById('total-ttc').textContent = totalTtc.toFixed(2).replace('.', ',') + ' MAD';
    }

    document.addEventListener('click', function(e) {
        if (e.target.closest('.remove-ligne')) {
            e.preventDefault();
            e.target.closest('.ligne-item').remove();
            updateTotaux();
        }
    });
    addLigneBtn.addEventListener('click', (e) => { e.preventDefault(); createItem(false); });
    addSectionBtn.addEventListener('click', (e) => { e.preventDefault(); createItem(true); });

    Sortable.create(lignesContainer, { animation: 150, onEnd: () => updateTotaux() });

    lignesContainer.querySelectorAll('.ligne-item').forEach(div => decorateLine(div, selectField(div, 'isSection')?.checked));
    updateTotaux();
});
</script>
{% endblock %}

